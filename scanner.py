import requests
import sys
import socket

def get_open_ports(target, port_range=(1, 1024)):
    open_ports = []
    for port in range(*port_range):
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(0.5)
            if s.connect_ex((target, port)) == 0:
                open_ports.append(port)
    return open_ports

def fetch_cve_data(version):
    url = f"https://cve.circl.lu/api/search/{version}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        cve_data = response.json()
        return cve_data
    except requests.RequestException as e:
        print(f"Ошибка при получении данных CVE: {e}")
        return None

def main():
    if len(sys.argv) < 3 or sys.argv[1] != '--target':
        print("Использование: python scanner.py --target <target_ip_or_domain>")
        return

    target = sys.argv[2]

    print(f"Сканирование цели: {target}")
    open_ports = get_open_ports(target)
    print(f"Открытые порты: {open_ports}")

    for port in open_ports:
        version = f"{target}:{port}"  # Пример версии на основе порта (можно расширить)
        cve_data = fetch_cve_data(version)
        if cve_data:
            print(f"Найдены уязвимости для {version}:")
            for item in cve_data:
                print(f"- CVE ID: {item['id']}, Описание: {item['summary']}")

if __name__ == "__main__":
    main()
